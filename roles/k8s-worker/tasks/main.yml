- name: create installation directories
  file:
    state: directory
    path: "{{ item }}"
  with_items:
    - /var/lib/kubelet
    - /var/lib/kube-proxy
    - /var/lib/kubernetes
    - /var/run/kubernetes

- name: copy certificates & configurationfiles
  copy:
    src: "/vagrant/{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
  with_items:
    - { src: "certificates/{{ inventory_hostname }}-key.pem", dest: /var/lib/kubelet }
    - { src: "certificates/{{ inventory_hostname }}.pem", dest: /var/lib/kubelet }
    - { src: "configurationfiles/{{ inventory_hostname }}.kubeconfig", dest: /var/lib/kubelet/kubeconfig }
    - { src: "certificates/ca.pem", dest: /var/lib/kubernetes }
    - { src: "configurationfiles/kube-proxy.kubeconfig", dest: /var/lib/kube-proxy/kubeconfig }

- name: install flannel-pre-configured Docker on Workers
  include_role:
    name: docker

- name: install and configure flannel CNI networking
  include_role:
    name: flannel

- name: Verify if flannel is added as network interface
  shell: ip addr
  register: ip_addr_result
  until: ip_addr_result.stdout.find("flannel.1") != -1
  retries: 5
  delay: 10
  tags: network
  when: inventory_hostname == 'worker-0'

- name: Show, if network interface flannel.1 was created
  debug:
    msg: "{{ ip_addr_result.stdout_lines }}"
  tags: network
  when: inventory_hostname == 'worker-0'

- name: install packages
  apt:
    name: "{{ item }}"
  with_items:
    - socat
    - conntrack
    - ipset

- name: download worker binaries
  get_url:
    url: "{{ item.src }}"
    dest: "/usr/local/bin/{{ item.name }}"
    mode: 0755
  with_items:
    - { src: 'https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/kube-proxy', name: kube-proxy }
    - { src: 'https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/kubectl', name: kubectl }
    - { src: 'https://storage.googleapis.com/kubernetes-release/release/{{ kubernetes_version }}/bin/linux/amd64/kubelet', name: kubelet }

- name: download worker tars
  unarchive:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    remote_src: yes
    creates: "{{ item.dest }}/{{ item.creates }}"
  with_items:
    - { src: 'https://github.com/kubernetes-incubator/cri-tools/releases/download/v1.0.0-beta.0/crictl-v1.0.0-beta.0-linux-amd64.tar.gz', dest: /usr/local/bin, creates: crictl }

- name: template kubelet-config.yaml, kube-proxy-config.yaml, kubelet.service, kube-proxy.service
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: kubelet-config.yaml.j2, dest: /var/lib/kubelet/kubelet-config.yaml }
    - { src: kube-proxy-config.yaml.j2, dest: /var/lib/kube-proxy/kube-proxy-config.yaml }
    - { src: kubelet.service.j2, dest: /etc/systemd/system/kubelet.service }
    - { src: kube-proxy.service, dest: /etc/systemd/system/kube-proxy.service }

- name: start worker services
  systemd:
    name: "{{ item }}"
    state: restarted
    enabled: yes
    daemon_reload: yes
  with_items:
    - kubelet
    - kube-proxy
