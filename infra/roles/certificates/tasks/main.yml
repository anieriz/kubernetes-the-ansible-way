# This implements https://github.com/kelseyhightower/kubernetes-the-hard-way/blob/master/docs/04-certificate-authority.md
- name: install cfssl
  apt:
    name: golang-cfssl

- name: ensure dirs exist
  file:
    path: "{{ item }}"
    state: directory
    mode: 0755
  with_items:
    - /vagrant/certificates
    - /opt/cfssl-config

- name: copy cfssl config files
  copy:
    src: "{{ item }}"
    dest: "/opt/cfssl-config/{{ item }}"
  with_items:
    - ca-config.json

- name: create cfssl config files
  template:
    src: templates/csr.json.j2
    dest: "/opt/cfssl-config/{{ item.name }}-csr.json"
  with_items:
    - { prefix: '', name: ca }
    - { prefix: '', name: admin }
    - { prefix: 'system:node:', name: worker-0 }
    - { prefix: 'system:node:', name: worker-1 }
    - { prefix: 'system:node:', name: worker-2 }
    - { prefix: 'system:', name: kube-controller-manager }
    - { prefix: 'system:', name: kube-proxy }
    - { prefix: 'system:', name: kube-scheduler }
    - { prefix: '', name: kubernetes }
    - { prefix: '', name: service-accounts }

- name: generate ca keys
  shell: cfssl gencert -initca /opt/cfssl-config/ca-csr.json | cfssljson -bare ca
  args:
    chdir: /vagrant/certificates
    creates: /vagrant/certificates/ca-key.pem

- name: generate Client Certificates for admin, kube-controller-manager, kube-proxy, kube-scheduler, service-accounts
  shell:
   'cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=/opt/cfssl-config/ca-config.json \
      -profile=kubernetes \
      /opt/cfssl-config/{{ item }}-csr.json | cfssljson -bare {{ item }}'
  args:
    chdir: /vagrant/certificates
    creates: "/vagrant/certificates/{{ item }}-key.pem"
  with_items:
    - admin
    - kube-controller-manager
    - kube-proxy
    - kube-scheduler
    - service-accounts

- name: generate Kubelet Client Certificates
  shell:
   'cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=/opt/cfssl-config/ca-config.json \
      -hostname={{ item.node }}.k8s,{{ item.ip }} \
      -profile=kubernetes \
      /opt/cfssl-config/{{ item.node }}-csr.json | cfssljson -bare {{ item.node }}'
  args:
    chdir: /vagrant/certificates
    creates: "/vagrant/certificates/{{ item.node }}-key.pem"
  with_items:
    - { node: worker-0, ip: 172.16.2.100 }
    - { node: worker-1, ip: 172.16.2.101 }
    - { node: worker-2, ip: 172.16.2.102 }

- name: generate Kubernetes API Server Certificate
  shell:
   'cfssl gencert \
      -ca=ca.pem \
      -ca-key=ca-key.pem \
      -config=/opt/cfssl-config/ca-config.json \
      -hostname=10.32.0.1,10.240.0.10,10.240.0.11,10.240.0.12,{{ kubernetes_public_address }},127.0.0.1,kubernetes.default \
      -profile=kubernetes \
      /opt/cfssl-config/kubernetes-csr.json | cfssljson -bare kubernetes'
  args:
    chdir: /vagrant/certificates
    creates: "/vagrant/certificates/kubernetes-key.pem"

  # Distribute the Client and Server Certificates
  # is already done via Vagrant (/vagrant/certificates)